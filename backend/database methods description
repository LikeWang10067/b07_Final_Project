***fake methods***:
fgetusernull(String username, int password, Consumer<user> callback)
this function will return a null object regardless of input

fgetuser(String username, int password, Consumer<user> callback)
this function will return a fake user object regardless of input

fgeteventnull(event a, Consumer<user> callback)
this function will return a null object regardless of input

fgetevent(event a, Consumer<user> callback)
this function will return a fake event object regardless of input

fgetvenuenull(venue a, Consumer<venue> callback)
this function will return a null object regardless of input

fgetvenue(venue a, Consumer<venue> callback)
this function will return a fake venue regardless of input

***real methods***

checkDateSequence(String start, String end):
compares the 2 time string written in LocalDateTime format and check if the start time is before the end time
return true if start<end
if not return false

adduser(user a): add a new user to the database

addevent(event a): add a new event to database

addvenue(venue a): add a new venue to database

CheckLogIn(String applicantname, int password,Consumer<user> callback)
this function will check if the user provided exists and will validate the password
if pass validation: return a user of the match
if not: return null

CheckSignUp(String applicantname,int password,Consumer<user> callback)
this function will check if the user provided not exits in the database
if it does not exists: this will add the information of the user to the database and return
that user object
if it exits: this will not modify the database and will return null

DisplayVenues(Consumer<ArrayList<venue>> callback)
this function will return an ArrayList<venue> object which contains all the venues

DisplayEventsByVenue(String venuename,Consumer<ArrayList<event>> callback) 
this function will return an ArrayList of event objects which relates to the venuename provid.
if the venue is not in the database, it will return an empty arraylist

CheckEventStatus(event a,Consumer<Boolean> callback)
this function will take in a event object and checks if it can add players in the firebase 
if the event can still be registered for user, it will return true
if not: it will return false

GetEventInfo(event a, Consumer<event> callback)
this function will take in an event object and return a comprehensive of event object in database
The event can be updated in its reg_num field.
if it exists in database, it will return the event object store in database
if not: it will return null

admainAddVenue(String venueName, Consumer<venue> callback)
This function will take in an venueName and then the admin can add that venue to the database
if the venue already exits: return null
if not: return the venue object added

checkEventOverlap(event newEvent,Consumer<Boolean> callback)
This function will check if the newEvent overlaps with the existing event in time and venue
return true if the events overlaps with another one already in database
return false if the event does not overlap with any other events

admainAddEvent(event newEvent,Consumer<Integer> callback)
This function will add an event to the database, it should be called when the checkEventOverlap returns false.
return 0: the venue of the newEvent does not exits
return 1: the event already exits
return 2: the event is successfully added

JoinEvent(String username, event target, Consumer<Boolean> callback)
This function will let a user to join a event
return false: 3 cases may lead to false: the user does not exists, the event does not exists, the event is full of people
return true: the user joins the event successfully

unjoinEvent(String username, event target, Consumer<Integer> callback)

This function will let a user to unjoin a evernt;
return 2 success
return 1 user doest have any events or the target event in not in that user's list
return 0 no such user

adaminDeleteEvent(event delEvent, Consumer<Boolean> callback)

This function will let admain to delete a event
return true for success
return false for fail

filterVenue(String input, Consumer<ArrayList<venue>> callback
This function will filter all the venues for adamin
return the result a list venues.



